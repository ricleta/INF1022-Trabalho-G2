Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO
Rule 2     cmds -> cmd cmds
Rule 3     cmds -> cmd
Rule 4     cmd -> while_statement
Rule 5     cmd -> assignment
Rule 6     cmd -> arithmetic_expr
Rule 7     cmd -> conditional
Rule 8     cmd -> zero_statement
Rule 9     cmd -> eval_statement
Rule 10    assignment -> ID EQUAL ID
Rule 11    assignment -> ID EQUAL NUMERO
Rule 12    assignment -> ID EQUAL arithmetic_expr
Rule 13    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 14    arithmetic_expr -> arithmetic_expr MULT arithmetic_expr
Rule 15    arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN
Rule 16    arithmetic_expr -> ID
Rule 17    arithmetic_expr -> NUMERO
Rule 18    conditional -> IF condicao THEN cmds END_IF
Rule 19    conditional -> IF condicao THEN cmds ELSE cmds END_IF
Rule 20    while_statement -> ENQUANTO condicao FACA cmds FIM
Rule 21    zero_statement -> ZERO ID
Rule 22    eval_statement -> EVAL cmds VEZES arithmetic_expr FIM
Rule 23    eval_statement -> EVAL cmds VEZES ID FIM
Rule 24    eval_statement -> EVAL cmds VEZES NUMERO FIM
Rule 25    varlist -> ID varlist
Rule 26    varlist -> ID
Rule 27    condicao -> ID COMPARE ID
Rule 28    condicao -> ID GREATER ID
Rule 29    condicao -> ID LESSER ID
Rule 30    condicao -> ID COMPARE NUMERO
Rule 31    condicao -> ID GREATER NUMERO
Rule 32    condicao -> ID LESSER NUMERO
Rule 33    idlist -> ID idlist
Rule 34    idlist -> ID

Terminals, with rules where they appear

CLOSE_PAREN          : 15
COMPARE              : 27 30
ELSE                 : 19
END_IF               : 18 19
ENQUANTO             : 20
EQUAL                : 10 11 12
EVAL                 : 22 23 24
EXECUTE              : 1
FACA                 : 20
FIM                  : 20 22 23 24
GREATER              : 28 31
ID                   : 10 10 11 12 16 21 23 25 26 27 27 28 28 29 29 30 31 32 33 34
IF                   : 18 19
INICIO               : 1
LESSER               : 29 32
MONITOR              : 1
MULT                 : 14
NUMERO               : 11 17 24 30 31 32
OPEN_PAREN           : 15
PLUS                 : 13
TERMINO              : 1
THEN                 : 18 19
VEZES                : 22 23 24
ZERO                 : 21
error                : 

Nonterminals, with rules where they appear

arithmetic_expr      : 6 12 13 13 14 14 15 22
assignment           : 5
cmd                  : 2 3
cmds                 : 1 2 18 19 19 20 22 23 24
condicao             : 18 19 20
conditional          : 7
eval_statement       : 9
idlist               : 1 33
programa             : 0
varlist              : 1 25
while_statement      : 4
zero_statement       : 8

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO varlist MONITOR idlist EXECUTE cmds TERMINO

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . varlist MONITOR idlist EXECUTE cmds TERMINO
    (25) varlist -> . ID varlist
    (26) varlist -> . ID

    ID              shift and go to state 4

    varlist                        shift and go to state 3

state 3

    (1) programa -> INICIO varlist . MONITOR idlist EXECUTE cmds TERMINO

    MONITOR         shift and go to state 5


state 4

    (25) varlist -> ID . varlist
    (26) varlist -> ID .
    (25) varlist -> . ID varlist
    (26) varlist -> . ID

    MONITOR         reduce using rule 26 (varlist -> ID .)
    ID              shift and go to state 4

    varlist                        shift and go to state 6

state 5

    (1) programa -> INICIO varlist MONITOR . idlist EXECUTE cmds TERMINO
    (33) idlist -> . ID idlist
    (34) idlist -> . ID

    ID              shift and go to state 8

    idlist                         shift and go to state 7

state 6

    (25) varlist -> ID varlist .

    MONITOR         reduce using rule 25 (varlist -> ID varlist .)


state 7

    (1) programa -> INICIO varlist MONITOR idlist . EXECUTE cmds TERMINO

    EXECUTE         shift and go to state 9


state 8

    (33) idlist -> ID . idlist
    (34) idlist -> ID .
    (33) idlist -> . ID idlist
    (34) idlist -> . ID

    EXECUTE         reduce using rule 34 (idlist -> ID .)
    ID              shift and go to state 8

    idlist                         shift and go to state 10

state 9

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE . cmds TERMINO
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (10) assignment -> . ID EQUAL ID
    (11) assignment -> . ID EQUAL NUMERO
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO ID
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> . EVAL cmds VEZES ID FIM
    (24) eval_statement -> . EVAL cmds VEZES NUMERO FIM

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 22
    NUMERO          shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25

    cmds                           shift and go to state 11
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18

state 10

    (33) idlist -> ID idlist .

    EXECUTE         reduce using rule 33 (idlist -> ID idlist .)


state 11

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE cmds . TERMINO

    TERMINO         shift and go to state 26


state 12

    (2) cmds -> cmd . cmds
    (3) cmds -> cmd .
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (10) assignment -> . ID EQUAL ID
    (11) assignment -> . ID EQUAL NUMERO
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO ID
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> . EVAL cmds VEZES ID FIM
    (24) eval_statement -> . EVAL cmds VEZES NUMERO FIM

    TERMINO         reduce using rule 3 (cmds -> cmd .)
    VEZES           reduce using rule 3 (cmds -> cmd .)
    FIM             reduce using rule 3 (cmds -> cmd .)
    END_IF          reduce using rule 3 (cmds -> cmd .)
    ELSE            reduce using rule 3 (cmds -> cmd .)
    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 22
    NUMERO          shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25

    cmd                            shift and go to state 12
    cmds                           shift and go to state 27
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18

state 13

    (4) cmd -> while_statement .

    ENQUANTO        reduce using rule 4 (cmd -> while_statement .)
    ID              reduce using rule 4 (cmd -> while_statement .)
    OPEN_PAREN      reduce using rule 4 (cmd -> while_statement .)
    NUMERO          reduce using rule 4 (cmd -> while_statement .)
    IF              reduce using rule 4 (cmd -> while_statement .)
    ZERO            reduce using rule 4 (cmd -> while_statement .)
    EVAL            reduce using rule 4 (cmd -> while_statement .)
    TERMINO         reduce using rule 4 (cmd -> while_statement .)
    VEZES           reduce using rule 4 (cmd -> while_statement .)
    FIM             reduce using rule 4 (cmd -> while_statement .)
    END_IF          reduce using rule 4 (cmd -> while_statement .)
    ELSE            reduce using rule 4 (cmd -> while_statement .)


state 14

    (5) cmd -> assignment .

    ENQUANTO        reduce using rule 5 (cmd -> assignment .)
    ID              reduce using rule 5 (cmd -> assignment .)
    OPEN_PAREN      reduce using rule 5 (cmd -> assignment .)
    NUMERO          reduce using rule 5 (cmd -> assignment .)
    IF              reduce using rule 5 (cmd -> assignment .)
    ZERO            reduce using rule 5 (cmd -> assignment .)
    EVAL            reduce using rule 5 (cmd -> assignment .)
    TERMINO         reduce using rule 5 (cmd -> assignment .)
    VEZES           reduce using rule 5 (cmd -> assignment .)
    FIM             reduce using rule 5 (cmd -> assignment .)
    END_IF          reduce using rule 5 (cmd -> assignment .)
    ELSE            reduce using rule 5 (cmd -> assignment .)


state 15

    (6) cmd -> arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    ENQUANTO        reduce using rule 6 (cmd -> arithmetic_expr .)
    ID              reduce using rule 6 (cmd -> arithmetic_expr .)
    OPEN_PAREN      reduce using rule 6 (cmd -> arithmetic_expr .)
    NUMERO          reduce using rule 6 (cmd -> arithmetic_expr .)
    IF              reduce using rule 6 (cmd -> arithmetic_expr .)
    ZERO            reduce using rule 6 (cmd -> arithmetic_expr .)
    EVAL            reduce using rule 6 (cmd -> arithmetic_expr .)
    TERMINO         reduce using rule 6 (cmd -> arithmetic_expr .)
    VEZES           reduce using rule 6 (cmd -> arithmetic_expr .)
    FIM             reduce using rule 6 (cmd -> arithmetic_expr .)
    END_IF          reduce using rule 6 (cmd -> arithmetic_expr .)
    ELSE            reduce using rule 6 (cmd -> arithmetic_expr .)
    PLUS            shift and go to state 28
    MULT            shift and go to state 29


state 16

    (7) cmd -> conditional .

    ENQUANTO        reduce using rule 7 (cmd -> conditional .)
    ID              reduce using rule 7 (cmd -> conditional .)
    OPEN_PAREN      reduce using rule 7 (cmd -> conditional .)
    NUMERO          reduce using rule 7 (cmd -> conditional .)
    IF              reduce using rule 7 (cmd -> conditional .)
    ZERO            reduce using rule 7 (cmd -> conditional .)
    EVAL            reduce using rule 7 (cmd -> conditional .)
    TERMINO         reduce using rule 7 (cmd -> conditional .)
    VEZES           reduce using rule 7 (cmd -> conditional .)
    FIM             reduce using rule 7 (cmd -> conditional .)
    END_IF          reduce using rule 7 (cmd -> conditional .)
    ELSE            reduce using rule 7 (cmd -> conditional .)


state 17

    (8) cmd -> zero_statement .

    ENQUANTO        reduce using rule 8 (cmd -> zero_statement .)
    ID              reduce using rule 8 (cmd -> zero_statement .)
    OPEN_PAREN      reduce using rule 8 (cmd -> zero_statement .)
    NUMERO          reduce using rule 8 (cmd -> zero_statement .)
    IF              reduce using rule 8 (cmd -> zero_statement .)
    ZERO            reduce using rule 8 (cmd -> zero_statement .)
    EVAL            reduce using rule 8 (cmd -> zero_statement .)
    TERMINO         reduce using rule 8 (cmd -> zero_statement .)
    VEZES           reduce using rule 8 (cmd -> zero_statement .)
    FIM             reduce using rule 8 (cmd -> zero_statement .)
    END_IF          reduce using rule 8 (cmd -> zero_statement .)
    ELSE            reduce using rule 8 (cmd -> zero_statement .)


state 18

    (9) cmd -> eval_statement .

    ENQUANTO        reduce using rule 9 (cmd -> eval_statement .)
    ID              reduce using rule 9 (cmd -> eval_statement .)
    OPEN_PAREN      reduce using rule 9 (cmd -> eval_statement .)
    NUMERO          reduce using rule 9 (cmd -> eval_statement .)
    IF              reduce using rule 9 (cmd -> eval_statement .)
    ZERO            reduce using rule 9 (cmd -> eval_statement .)
    EVAL            reduce using rule 9 (cmd -> eval_statement .)
    TERMINO         reduce using rule 9 (cmd -> eval_statement .)
    VEZES           reduce using rule 9 (cmd -> eval_statement .)
    FIM             reduce using rule 9 (cmd -> eval_statement .)
    END_IF          reduce using rule 9 (cmd -> eval_statement .)
    ELSE            reduce using rule 9 (cmd -> eval_statement .)


state 19

    (20) while_statement -> ENQUANTO . condicao FACA cmds FIM
    (27) condicao -> . ID COMPARE ID
    (28) condicao -> . ID GREATER ID
    (29) condicao -> . ID LESSER ID
    (30) condicao -> . ID COMPARE NUMERO
    (31) condicao -> . ID GREATER NUMERO
    (32) condicao -> . ID LESSER NUMERO

    ID              shift and go to state 31

    condicao                       shift and go to state 30

state 20

    (10) assignment -> ID . EQUAL ID
    (11) assignment -> ID . EQUAL NUMERO
    (12) assignment -> ID . EQUAL arithmetic_expr
    (16) arithmetic_expr -> ID .

    EQUAL           shift and go to state 32
    PLUS            reduce using rule 16 (arithmetic_expr -> ID .)
    MULT            reduce using rule 16 (arithmetic_expr -> ID .)
    ENQUANTO        reduce using rule 16 (arithmetic_expr -> ID .)
    ID              reduce using rule 16 (arithmetic_expr -> ID .)
    OPEN_PAREN      reduce using rule 16 (arithmetic_expr -> ID .)
    NUMERO          reduce using rule 16 (arithmetic_expr -> ID .)
    IF              reduce using rule 16 (arithmetic_expr -> ID .)
    ZERO            reduce using rule 16 (arithmetic_expr -> ID .)
    EVAL            reduce using rule 16 (arithmetic_expr -> ID .)
    TERMINO         reduce using rule 16 (arithmetic_expr -> ID .)
    VEZES           reduce using rule 16 (arithmetic_expr -> ID .)
    FIM             reduce using rule 16 (arithmetic_expr -> ID .)
    END_IF          reduce using rule 16 (arithmetic_expr -> ID .)
    ELSE            reduce using rule 16 (arithmetic_expr -> ID .)


state 21

    (17) arithmetic_expr -> NUMERO .

    PLUS            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    MULT            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    ENQUANTO        reduce using rule 17 (arithmetic_expr -> NUMERO .)
    ID              reduce using rule 17 (arithmetic_expr -> NUMERO .)
    OPEN_PAREN      reduce using rule 17 (arithmetic_expr -> NUMERO .)
    NUMERO          reduce using rule 17 (arithmetic_expr -> NUMERO .)
    IF              reduce using rule 17 (arithmetic_expr -> NUMERO .)
    ZERO            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    EVAL            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    TERMINO         reduce using rule 17 (arithmetic_expr -> NUMERO .)
    VEZES           reduce using rule 17 (arithmetic_expr -> NUMERO .)
    FIM             reduce using rule 17 (arithmetic_expr -> NUMERO .)
    END_IF          reduce using rule 17 (arithmetic_expr -> NUMERO .)
    ELSE            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    CLOSE_PAREN     reduce using rule 17 (arithmetic_expr -> NUMERO .)


state 22

    (15) arithmetic_expr -> OPEN_PAREN . arithmetic_expr CLOSE_PAREN
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO

    OPEN_PAREN      shift and go to state 22
    ID              shift and go to state 34
    NUMERO          shift and go to state 21

    arithmetic_expr                shift and go to state 33

state 23

    (18) conditional -> IF . condicao THEN cmds END_IF
    (19) conditional -> IF . condicao THEN cmds ELSE cmds END_IF
    (27) condicao -> . ID COMPARE ID
    (28) condicao -> . ID GREATER ID
    (29) condicao -> . ID LESSER ID
    (30) condicao -> . ID COMPARE NUMERO
    (31) condicao -> . ID GREATER NUMERO
    (32) condicao -> . ID LESSER NUMERO

    ID              shift and go to state 31

    condicao                       shift and go to state 35

state 24

    (21) zero_statement -> ZERO . ID

    ID              shift and go to state 36


state 25

    (22) eval_statement -> EVAL . cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> EVAL . cmds VEZES ID FIM
    (24) eval_statement -> EVAL . cmds VEZES NUMERO FIM
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (10) assignment -> . ID EQUAL ID
    (11) assignment -> . ID EQUAL NUMERO
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO ID
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> . EVAL cmds VEZES ID FIM
    (24) eval_statement -> . EVAL cmds VEZES NUMERO FIM

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 22
    NUMERO          shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25

    cmds                           shift and go to state 37
    arithmetic_expr                shift and go to state 15
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18

state 26

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO .

    $end            reduce using rule 1 (programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO .)


state 27

    (2) cmds -> cmd cmds .

    TERMINO         reduce using rule 2 (cmds -> cmd cmds .)
    VEZES           reduce using rule 2 (cmds -> cmd cmds .)
    FIM             reduce using rule 2 (cmds -> cmd cmds .)
    END_IF          reduce using rule 2 (cmds -> cmd cmds .)
    ELSE            reduce using rule 2 (cmds -> cmd cmds .)


state 28

    (13) arithmetic_expr -> arithmetic_expr PLUS . arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO

    OPEN_PAREN      shift and go to state 22
    ID              shift and go to state 34
    NUMERO          shift and go to state 21

    arithmetic_expr                shift and go to state 38

state 29

    (14) arithmetic_expr -> arithmetic_expr MULT . arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO

    OPEN_PAREN      shift and go to state 22
    ID              shift and go to state 34
    NUMERO          shift and go to state 21

    arithmetic_expr                shift and go to state 39

state 30

    (20) while_statement -> ENQUANTO condicao . FACA cmds FIM

    FACA            shift and go to state 40


state 31

    (27) condicao -> ID . COMPARE ID
    (28) condicao -> ID . GREATER ID
    (29) condicao -> ID . LESSER ID
    (30) condicao -> ID . COMPARE NUMERO
    (31) condicao -> ID . GREATER NUMERO
    (32) condicao -> ID . LESSER NUMERO

    COMPARE         shift and go to state 41
    GREATER         shift and go to state 42
    LESSER          shift and go to state 43


state 32

    (10) assignment -> ID EQUAL . ID
    (11) assignment -> ID EQUAL . NUMERO
    (12) assignment -> ID EQUAL . arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO

    ID              shift and go to state 44
    NUMERO          shift and go to state 45
    OPEN_PAREN      shift and go to state 22

    arithmetic_expr                shift and go to state 46

state 33

    (15) arithmetic_expr -> OPEN_PAREN arithmetic_expr . CLOSE_PAREN
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    CLOSE_PAREN     shift and go to state 47
    PLUS            shift and go to state 28
    MULT            shift and go to state 29


state 34

    (16) arithmetic_expr -> ID .

    CLOSE_PAREN     reduce using rule 16 (arithmetic_expr -> ID .)
    PLUS            reduce using rule 16 (arithmetic_expr -> ID .)
    MULT            reduce using rule 16 (arithmetic_expr -> ID .)
    ENQUANTO        reduce using rule 16 (arithmetic_expr -> ID .)
    ID              reduce using rule 16 (arithmetic_expr -> ID .)
    OPEN_PAREN      reduce using rule 16 (arithmetic_expr -> ID .)
    NUMERO          reduce using rule 16 (arithmetic_expr -> ID .)
    IF              reduce using rule 16 (arithmetic_expr -> ID .)
    ZERO            reduce using rule 16 (arithmetic_expr -> ID .)
    EVAL            reduce using rule 16 (arithmetic_expr -> ID .)
    TERMINO         reduce using rule 16 (arithmetic_expr -> ID .)
    VEZES           reduce using rule 16 (arithmetic_expr -> ID .)
    FIM             reduce using rule 16 (arithmetic_expr -> ID .)
    END_IF          reduce using rule 16 (arithmetic_expr -> ID .)
    ELSE            reduce using rule 16 (arithmetic_expr -> ID .)


state 35

    (18) conditional -> IF condicao . THEN cmds END_IF
    (19) conditional -> IF condicao . THEN cmds ELSE cmds END_IF

    THEN            shift and go to state 48


state 36

    (21) zero_statement -> ZERO ID .

    ENQUANTO        reduce using rule 21 (zero_statement -> ZERO ID .)
    ID              reduce using rule 21 (zero_statement -> ZERO ID .)
    OPEN_PAREN      reduce using rule 21 (zero_statement -> ZERO ID .)
    NUMERO          reduce using rule 21 (zero_statement -> ZERO ID .)
    IF              reduce using rule 21 (zero_statement -> ZERO ID .)
    ZERO            reduce using rule 21 (zero_statement -> ZERO ID .)
    EVAL            reduce using rule 21 (zero_statement -> ZERO ID .)
    TERMINO         reduce using rule 21 (zero_statement -> ZERO ID .)
    VEZES           reduce using rule 21 (zero_statement -> ZERO ID .)
    FIM             reduce using rule 21 (zero_statement -> ZERO ID .)
    END_IF          reduce using rule 21 (zero_statement -> ZERO ID .)
    ELSE            reduce using rule 21 (zero_statement -> ZERO ID .)


state 37

    (22) eval_statement -> EVAL cmds . VEZES arithmetic_expr FIM
    (23) eval_statement -> EVAL cmds . VEZES ID FIM
    (24) eval_statement -> EVAL cmds . VEZES NUMERO FIM

    VEZES           shift and go to state 49


state 38

    (13) arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    ENQUANTO        reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ID              reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    OPEN_PAREN      reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    NUMERO          reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    IF              reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ZERO            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    EVAL            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    TERMINO         reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    VEZES           reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    FIM             reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    END_IF          reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ELSE            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    PLUS            shift and go to state 28
    MULT            shift and go to state 29

  ! PLUS            [ reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]
  ! MULT            [ reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]


state 39

    (14) arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    ENQUANTO        reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ID              reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    OPEN_PAREN      reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    NUMERO          reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    IF              reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ZERO            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    EVAL            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    TERMINO         reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    VEZES           reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    FIM             reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    END_IF          reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ELSE            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    PLUS            shift and go to state 28
    MULT            shift and go to state 29

  ! PLUS            [ reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .) ]
  ! MULT            [ reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .) ]


state 40

    (20) while_statement -> ENQUANTO condicao FACA . cmds FIM
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (10) assignment -> . ID EQUAL ID
    (11) assignment -> . ID EQUAL NUMERO
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO ID
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> . EVAL cmds VEZES ID FIM
    (24) eval_statement -> . EVAL cmds VEZES NUMERO FIM

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 22
    NUMERO          shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25

    cmds                           shift and go to state 50
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18

state 41

    (27) condicao -> ID COMPARE . ID
    (30) condicao -> ID COMPARE . NUMERO

    ID              shift and go to state 51
    NUMERO          shift and go to state 52


state 42

    (28) condicao -> ID GREATER . ID
    (31) condicao -> ID GREATER . NUMERO

    ID              shift and go to state 53
    NUMERO          shift and go to state 54


state 43

    (29) condicao -> ID LESSER . ID
    (32) condicao -> ID LESSER . NUMERO

    ID              shift and go to state 55
    NUMERO          shift and go to state 56


state 44

    (10) assignment -> ID EQUAL ID .
    (16) arithmetic_expr -> ID .

  ! reduce/reduce conflict for ENQUANTO resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for ID resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for NUMERO resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for IF resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for ZERO resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for EVAL resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for TERMINO resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for VEZES resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for FIM resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for END_IF resolved using rule 10 (assignment -> ID EQUAL ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (assignment -> ID EQUAL ID .)
    ENQUANTO        reduce using rule 10 (assignment -> ID EQUAL ID .)
    ID              reduce using rule 10 (assignment -> ID EQUAL ID .)
    OPEN_PAREN      reduce using rule 10 (assignment -> ID EQUAL ID .)
    NUMERO          reduce using rule 10 (assignment -> ID EQUAL ID .)
    IF              reduce using rule 10 (assignment -> ID EQUAL ID .)
    ZERO            reduce using rule 10 (assignment -> ID EQUAL ID .)
    EVAL            reduce using rule 10 (assignment -> ID EQUAL ID .)
    TERMINO         reduce using rule 10 (assignment -> ID EQUAL ID .)
    VEZES           reduce using rule 10 (assignment -> ID EQUAL ID .)
    FIM             reduce using rule 10 (assignment -> ID EQUAL ID .)
    END_IF          reduce using rule 10 (assignment -> ID EQUAL ID .)
    ELSE            reduce using rule 10 (assignment -> ID EQUAL ID .)
    PLUS            reduce using rule 16 (arithmetic_expr -> ID .)
    MULT            reduce using rule 16 (arithmetic_expr -> ID .)

  ! ENQUANTO        [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! ID              [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! OPEN_PAREN      [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! NUMERO          [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! IF              [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! ZERO            [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! EVAL            [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! TERMINO         [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! VEZES           [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! FIM             [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! END_IF          [ reduce using rule 16 (arithmetic_expr -> ID .) ]
  ! ELSE            [ reduce using rule 16 (arithmetic_expr -> ID .) ]


state 45

    (11) assignment -> ID EQUAL NUMERO .
    (17) arithmetic_expr -> NUMERO .

  ! reduce/reduce conflict for ENQUANTO resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for ID resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for NUMERO resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for IF resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for ZERO resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for EVAL resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for TERMINO resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for VEZES resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for FIM resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for END_IF resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
  ! reduce/reduce conflict for ELSE resolved using rule 11 (assignment -> ID EQUAL NUMERO .)
    ENQUANTO        reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    ID              reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    OPEN_PAREN      reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    NUMERO          reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    IF              reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    ZERO            reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    EVAL            reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    TERMINO         reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    VEZES           reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    FIM             reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    END_IF          reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    ELSE            reduce using rule 11 (assignment -> ID EQUAL NUMERO .)
    PLUS            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    MULT            reduce using rule 17 (arithmetic_expr -> NUMERO .)

  ! ENQUANTO        [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! ID              [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! OPEN_PAREN      [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! NUMERO          [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! IF              [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! ZERO            [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! EVAL            [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! TERMINO         [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! VEZES           [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! FIM             [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! END_IF          [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]
  ! ELSE            [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]


state 46

    (12) assignment -> ID EQUAL arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    ENQUANTO        reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    ID              reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    OPEN_PAREN      reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    NUMERO          reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    IF              reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    ZERO            reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    EVAL            reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    TERMINO         reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    VEZES           reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    FIM             reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    END_IF          reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    ELSE            reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    PLUS            shift and go to state 28
    MULT            shift and go to state 29


state 47

    (15) arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .

    PLUS            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    MULT            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ENQUANTO        reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ID              reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    NUMERO          reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    IF              reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ZERO            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    EVAL            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    TERMINO         reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    VEZES           reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    FIM             reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    END_IF          reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ELSE            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)


state 48

    (18) conditional -> IF condicao THEN . cmds END_IF
    (19) conditional -> IF condicao THEN . cmds ELSE cmds END_IF
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (10) assignment -> . ID EQUAL ID
    (11) assignment -> . ID EQUAL NUMERO
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO ID
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> . EVAL cmds VEZES ID FIM
    (24) eval_statement -> . EVAL cmds VEZES NUMERO FIM

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 22
    NUMERO          shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25

    cmds                           shift and go to state 57
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18

state 49

    (22) eval_statement -> EVAL cmds VEZES . arithmetic_expr FIM
    (23) eval_statement -> EVAL cmds VEZES . ID FIM
    (24) eval_statement -> EVAL cmds VEZES . NUMERO FIM
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO

    ID              shift and go to state 59
    NUMERO          shift and go to state 60
    OPEN_PAREN      shift and go to state 22

    arithmetic_expr                shift and go to state 58

state 50

    (20) while_statement -> ENQUANTO condicao FACA cmds . FIM

    FIM             shift and go to state 61


state 51

    (27) condicao -> ID COMPARE ID .

    FACA            reduce using rule 27 (condicao -> ID COMPARE ID .)
    THEN            reduce using rule 27 (condicao -> ID COMPARE ID .)


state 52

    (30) condicao -> ID COMPARE NUMERO .

    FACA            reduce using rule 30 (condicao -> ID COMPARE NUMERO .)
    THEN            reduce using rule 30 (condicao -> ID COMPARE NUMERO .)


state 53

    (28) condicao -> ID GREATER ID .

    FACA            reduce using rule 28 (condicao -> ID GREATER ID .)
    THEN            reduce using rule 28 (condicao -> ID GREATER ID .)


state 54

    (31) condicao -> ID GREATER NUMERO .

    FACA            reduce using rule 31 (condicao -> ID GREATER NUMERO .)
    THEN            reduce using rule 31 (condicao -> ID GREATER NUMERO .)


state 55

    (29) condicao -> ID LESSER ID .

    FACA            reduce using rule 29 (condicao -> ID LESSER ID .)
    THEN            reduce using rule 29 (condicao -> ID LESSER ID .)


state 56

    (32) condicao -> ID LESSER NUMERO .

    FACA            reduce using rule 32 (condicao -> ID LESSER NUMERO .)
    THEN            reduce using rule 32 (condicao -> ID LESSER NUMERO .)


state 57

    (18) conditional -> IF condicao THEN cmds . END_IF
    (19) conditional -> IF condicao THEN cmds . ELSE cmds END_IF

    END_IF          shift and go to state 62
    ELSE            shift and go to state 63


state 58

    (22) eval_statement -> EVAL cmds VEZES arithmetic_expr . FIM
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    FIM             shift and go to state 64
    PLUS            shift and go to state 28
    MULT            shift and go to state 29


state 59

    (23) eval_statement -> EVAL cmds VEZES ID . FIM
    (16) arithmetic_expr -> ID .

  ! shift/reduce conflict for FIM resolved as shift
    FIM             shift and go to state 65
    PLUS            reduce using rule 16 (arithmetic_expr -> ID .)
    MULT            reduce using rule 16 (arithmetic_expr -> ID .)

  ! FIM             [ reduce using rule 16 (arithmetic_expr -> ID .) ]


state 60

    (24) eval_statement -> EVAL cmds VEZES NUMERO . FIM
    (17) arithmetic_expr -> NUMERO .

  ! shift/reduce conflict for FIM resolved as shift
    FIM             shift and go to state 66
    PLUS            reduce using rule 17 (arithmetic_expr -> NUMERO .)
    MULT            reduce using rule 17 (arithmetic_expr -> NUMERO .)

  ! FIM             [ reduce using rule 17 (arithmetic_expr -> NUMERO .) ]


state 61

    (20) while_statement -> ENQUANTO condicao FACA cmds FIM .

    ENQUANTO        reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ID              reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    OPEN_PAREN      reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    NUMERO          reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    IF              reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ZERO            reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    EVAL            reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    TERMINO         reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    VEZES           reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    FIM             reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    END_IF          reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ELSE            reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)


state 62

    (18) conditional -> IF condicao THEN cmds END_IF .

    ENQUANTO        reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    ID              reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    OPEN_PAREN      reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    NUMERO          reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    IF              reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    ZERO            reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    EVAL            reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    TERMINO         reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    VEZES           reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    FIM             reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    END_IF          reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    ELSE            reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)


state 63

    (19) conditional -> IF condicao THEN cmds ELSE . cmds END_IF
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (10) assignment -> . ID EQUAL ID
    (11) assignment -> . ID EQUAL NUMERO
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . ID
    (17) arithmetic_expr -> . NUMERO
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO ID
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (23) eval_statement -> . EVAL cmds VEZES ID FIM
    (24) eval_statement -> . EVAL cmds VEZES NUMERO FIM

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 22
    NUMERO          shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25

    cmds                           shift and go to state 67
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18

state 64

    (22) eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .

    ENQUANTO        reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ID              reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    OPEN_PAREN      reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    NUMERO          reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    IF              reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ZERO            reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    EVAL            reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    TERMINO         reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    VEZES           reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    FIM             reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    END_IF          reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ELSE            reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)


state 65

    (23) eval_statement -> EVAL cmds VEZES ID FIM .

    ENQUANTO        reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    ID              reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    OPEN_PAREN      reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    NUMERO          reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    IF              reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    ZERO            reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    EVAL            reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    TERMINO         reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    VEZES           reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    FIM             reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    END_IF          reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)
    ELSE            reduce using rule 23 (eval_statement -> EVAL cmds VEZES ID FIM .)


state 66

    (24) eval_statement -> EVAL cmds VEZES NUMERO FIM .

    ENQUANTO        reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    ID              reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    OPEN_PAREN      reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    NUMERO          reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    IF              reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    ZERO            reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    EVAL            reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    TERMINO         reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    VEZES           reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    FIM             reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    END_IF          reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)
    ELSE            reduce using rule 24 (eval_statement -> EVAL cmds VEZES NUMERO FIM .)


state 67

    (19) conditional -> IF condicao THEN cmds ELSE cmds . END_IF

    END_IF          shift and go to state 68


state 68

    (19) conditional -> IF condicao THEN cmds ELSE cmds END_IF .

    ENQUANTO        reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ID              reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    OPEN_PAREN      reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    NUMERO          reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    IF              reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ZERO            reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    EVAL            reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    TERMINO         reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    VEZES           reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    FIM             reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    END_IF          reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ELSE            reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MULT in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MULT in state 39 resolved as shift
WARNING: shift/reduce conflict for FIM in state 59 resolved as shift
WARNING: shift/reduce conflict for FIM in state 60 resolved as shift
WARNING: reduce/reduce conflict in state 44 resolved using rule (assignment -> ID EQUAL ID)
WARNING: rejected rule (arithmetic_expr -> ID) in state 44
WARNING: reduce/reduce conflict in state 45 resolved using rule (assignment -> ID EQUAL NUMERO)
WARNING: rejected rule (arithmetic_expr -> NUMERO) in state 45
