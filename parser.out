Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO
Rule 2     cmds -> cmd cmds
Rule 3     cmds -> cmd
Rule 4     cmd -> while_statement
Rule 5     cmd -> assignment
Rule 6     cmd -> arithmetic_expr
Rule 7     cmd -> conditional
Rule 8     cmd -> zero_statement
Rule 9     cmd -> eval_statement
Rule 10    term -> ID
Rule 11    term -> NUMERO
Rule 12    assignment -> ID EQUAL arithmetic_expr
Rule 13    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 14    arithmetic_expr -> arithmetic_expr MULT arithmetic_expr
Rule 15    arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN
Rule 16    arithmetic_expr -> term
Rule 17    conditional -> IF condicao THEN cmds END_IF
Rule 18    conditional -> IF condicao THEN cmds ELSE cmds END_IF
Rule 19    while_statement -> ENQUANTO condicao FACA cmds FIM
Rule 20    zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN
Rule 21    eval_statement -> EVAL cmds VEZES arithmetic_expr FIM
Rule 22    varlist -> ID varlist
Rule 23    varlist -> ID
Rule 24    condicao -> ID COMPARE ID
Rule 25    condicao -> ID GREATER ID
Rule 26    condicao -> ID LESSER ID
Rule 27    condicao -> ID COMPARE NUMERO
Rule 28    condicao -> ID GREATER NUMERO
Rule 29    condicao -> ID LESSER NUMERO
Rule 30    idlist -> ID idlist
Rule 31    idlist -> ID

Terminals, with rules where they appear

CLOSE_PAREN          : 15 20
COMPARE              : 24 27
ELSE                 : 18
END_IF               : 17 18
ENQUANTO             : 19
EQUAL                : 12
EVAL                 : 21
EXECUTE              : 1
FACA                 : 19
FIM                  : 19 21
GREATER              : 25 28
ID                   : 10 12 20 22 23 24 24 25 25 26 26 27 28 29 30 31
IF                   : 17 18
INICIO               : 1
LESSER               : 26 29
MONITOR              : 1
MULT                 : 14
NUMERO               : 11 27 28 29
OPEN_PAREN           : 15 20
PLUS                 : 13
TERMINO              : 1
THEN                 : 17 18
VEZES                : 21
ZERO                 : 20
error                : 

Nonterminals, with rules where they appear

arithmetic_expr      : 6 12 13 13 14 14 15 21
assignment           : 5
cmd                  : 2 3
cmds                 : 1 2 17 18 18 19 21
condicao             : 17 18 19
conditional          : 7
eval_statement       : 9
idlist               : 1 30
programa             : 0
term                 : 16
varlist              : 1 22
while_statement      : 4
zero_statement       : 8

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO varlist MONITOR idlist EXECUTE cmds TERMINO

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . varlist MONITOR idlist EXECUTE cmds TERMINO
    (22) varlist -> . ID varlist
    (23) varlist -> . ID

    ID              shift and go to state 4

    varlist                        shift and go to state 3

state 3

    (1) programa -> INICIO varlist . MONITOR idlist EXECUTE cmds TERMINO

    MONITOR         shift and go to state 5


state 4

    (22) varlist -> ID . varlist
    (23) varlist -> ID .
    (22) varlist -> . ID varlist
    (23) varlist -> . ID

    MONITOR         reduce using rule 23 (varlist -> ID .)
    ID              shift and go to state 4

    varlist                        shift and go to state 6

state 5

    (1) programa -> INICIO varlist MONITOR . idlist EXECUTE cmds TERMINO
    (30) idlist -> . ID idlist
    (31) idlist -> . ID

    ID              shift and go to state 8

    idlist                         shift and go to state 7

state 6

    (22) varlist -> ID varlist .

    MONITOR         reduce using rule 22 (varlist -> ID varlist .)


state 7

    (1) programa -> INICIO varlist MONITOR idlist . EXECUTE cmds TERMINO

    EXECUTE         shift and go to state 9


state 8

    (30) idlist -> ID . idlist
    (31) idlist -> ID .
    (30) idlist -> . ID idlist
    (31) idlist -> . ID

    EXECUTE         reduce using rule 31 (idlist -> ID .)
    ID              shift and go to state 8

    idlist                         shift and go to state 10

state 9

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE . cmds TERMINO
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (19) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (17) conditional -> . IF condicao THEN cmds END_IF
    (18) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (20) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (21) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (10) term -> . ID
    (11) term -> . NUMERO

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25
    NUMERO          shift and go to state 26

    cmds                           shift and go to state 11
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18
    term                           shift and go to state 22

state 10

    (30) idlist -> ID idlist .

    EXECUTE         reduce using rule 30 (idlist -> ID idlist .)


state 11

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE cmds . TERMINO

    TERMINO         shift and go to state 27


state 12

    (2) cmds -> cmd . cmds
    (3) cmds -> cmd .
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (19) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (17) conditional -> . IF condicao THEN cmds END_IF
    (18) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (20) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (21) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (10) term -> . ID
    (11) term -> . NUMERO

    TERMINO         reduce using rule 3 (cmds -> cmd .)
    VEZES           reduce using rule 3 (cmds -> cmd .)
    FIM             reduce using rule 3 (cmds -> cmd .)
    END_IF          reduce using rule 3 (cmds -> cmd .)
    ELSE            reduce using rule 3 (cmds -> cmd .)
    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25
    NUMERO          shift and go to state 26

    cmd                            shift and go to state 12
    cmds                           shift and go to state 28
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18
    term                           shift and go to state 22

state 13

    (4) cmd -> while_statement .

    ENQUANTO        reduce using rule 4 (cmd -> while_statement .)
    ID              reduce using rule 4 (cmd -> while_statement .)
    OPEN_PAREN      reduce using rule 4 (cmd -> while_statement .)
    IF              reduce using rule 4 (cmd -> while_statement .)
    ZERO            reduce using rule 4 (cmd -> while_statement .)
    EVAL            reduce using rule 4 (cmd -> while_statement .)
    NUMERO          reduce using rule 4 (cmd -> while_statement .)
    TERMINO         reduce using rule 4 (cmd -> while_statement .)
    VEZES           reduce using rule 4 (cmd -> while_statement .)
    FIM             reduce using rule 4 (cmd -> while_statement .)
    END_IF          reduce using rule 4 (cmd -> while_statement .)
    ELSE            reduce using rule 4 (cmd -> while_statement .)


state 14

    (5) cmd -> assignment .

    ENQUANTO        reduce using rule 5 (cmd -> assignment .)
    ID              reduce using rule 5 (cmd -> assignment .)
    OPEN_PAREN      reduce using rule 5 (cmd -> assignment .)
    IF              reduce using rule 5 (cmd -> assignment .)
    ZERO            reduce using rule 5 (cmd -> assignment .)
    EVAL            reduce using rule 5 (cmd -> assignment .)
    NUMERO          reduce using rule 5 (cmd -> assignment .)
    TERMINO         reduce using rule 5 (cmd -> assignment .)
    VEZES           reduce using rule 5 (cmd -> assignment .)
    FIM             reduce using rule 5 (cmd -> assignment .)
    END_IF          reduce using rule 5 (cmd -> assignment .)
    ELSE            reduce using rule 5 (cmd -> assignment .)


state 15

    (6) cmd -> arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    ENQUANTO        reduce using rule 6 (cmd -> arithmetic_expr .)
    ID              reduce using rule 6 (cmd -> arithmetic_expr .)
    OPEN_PAREN      reduce using rule 6 (cmd -> arithmetic_expr .)
    IF              reduce using rule 6 (cmd -> arithmetic_expr .)
    ZERO            reduce using rule 6 (cmd -> arithmetic_expr .)
    EVAL            reduce using rule 6 (cmd -> arithmetic_expr .)
    NUMERO          reduce using rule 6 (cmd -> arithmetic_expr .)
    TERMINO         reduce using rule 6 (cmd -> arithmetic_expr .)
    VEZES           reduce using rule 6 (cmd -> arithmetic_expr .)
    FIM             reduce using rule 6 (cmd -> arithmetic_expr .)
    END_IF          reduce using rule 6 (cmd -> arithmetic_expr .)
    ELSE            reduce using rule 6 (cmd -> arithmetic_expr .)
    PLUS            shift and go to state 29
    MULT            shift and go to state 30


state 16

    (7) cmd -> conditional .

    ENQUANTO        reduce using rule 7 (cmd -> conditional .)
    ID              reduce using rule 7 (cmd -> conditional .)
    OPEN_PAREN      reduce using rule 7 (cmd -> conditional .)
    IF              reduce using rule 7 (cmd -> conditional .)
    ZERO            reduce using rule 7 (cmd -> conditional .)
    EVAL            reduce using rule 7 (cmd -> conditional .)
    NUMERO          reduce using rule 7 (cmd -> conditional .)
    TERMINO         reduce using rule 7 (cmd -> conditional .)
    VEZES           reduce using rule 7 (cmd -> conditional .)
    FIM             reduce using rule 7 (cmd -> conditional .)
    END_IF          reduce using rule 7 (cmd -> conditional .)
    ELSE            reduce using rule 7 (cmd -> conditional .)


state 17

    (8) cmd -> zero_statement .

    ENQUANTO        reduce using rule 8 (cmd -> zero_statement .)
    ID              reduce using rule 8 (cmd -> zero_statement .)
    OPEN_PAREN      reduce using rule 8 (cmd -> zero_statement .)
    IF              reduce using rule 8 (cmd -> zero_statement .)
    ZERO            reduce using rule 8 (cmd -> zero_statement .)
    EVAL            reduce using rule 8 (cmd -> zero_statement .)
    NUMERO          reduce using rule 8 (cmd -> zero_statement .)
    TERMINO         reduce using rule 8 (cmd -> zero_statement .)
    VEZES           reduce using rule 8 (cmd -> zero_statement .)
    FIM             reduce using rule 8 (cmd -> zero_statement .)
    END_IF          reduce using rule 8 (cmd -> zero_statement .)
    ELSE            reduce using rule 8 (cmd -> zero_statement .)


state 18

    (9) cmd -> eval_statement .

    ENQUANTO        reduce using rule 9 (cmd -> eval_statement .)
    ID              reduce using rule 9 (cmd -> eval_statement .)
    OPEN_PAREN      reduce using rule 9 (cmd -> eval_statement .)
    IF              reduce using rule 9 (cmd -> eval_statement .)
    ZERO            reduce using rule 9 (cmd -> eval_statement .)
    EVAL            reduce using rule 9 (cmd -> eval_statement .)
    NUMERO          reduce using rule 9 (cmd -> eval_statement .)
    TERMINO         reduce using rule 9 (cmd -> eval_statement .)
    VEZES           reduce using rule 9 (cmd -> eval_statement .)
    FIM             reduce using rule 9 (cmd -> eval_statement .)
    END_IF          reduce using rule 9 (cmd -> eval_statement .)
    ELSE            reduce using rule 9 (cmd -> eval_statement .)


state 19

    (19) while_statement -> ENQUANTO . condicao FACA cmds FIM
    (24) condicao -> . ID COMPARE ID
    (25) condicao -> . ID GREATER ID
    (26) condicao -> . ID LESSER ID
    (27) condicao -> . ID COMPARE NUMERO
    (28) condicao -> . ID GREATER NUMERO
    (29) condicao -> . ID LESSER NUMERO

    ID              shift and go to state 32

    condicao                       shift and go to state 31

state 20

    (12) assignment -> ID . EQUAL arithmetic_expr
    (10) term -> ID .

    EQUAL           shift and go to state 33
    PLUS            reduce using rule 10 (term -> ID .)
    MULT            reduce using rule 10 (term -> ID .)
    ENQUANTO        reduce using rule 10 (term -> ID .)
    ID              reduce using rule 10 (term -> ID .)
    OPEN_PAREN      reduce using rule 10 (term -> ID .)
    IF              reduce using rule 10 (term -> ID .)
    ZERO            reduce using rule 10 (term -> ID .)
    EVAL            reduce using rule 10 (term -> ID .)
    NUMERO          reduce using rule 10 (term -> ID .)
    TERMINO         reduce using rule 10 (term -> ID .)
    VEZES           reduce using rule 10 (term -> ID .)
    FIM             reduce using rule 10 (term -> ID .)
    END_IF          reduce using rule 10 (term -> ID .)
    ELSE            reduce using rule 10 (term -> ID .)


state 21

    (15) arithmetic_expr -> OPEN_PAREN . arithmetic_expr CLOSE_PAREN
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (10) term -> . ID
    (11) term -> . NUMERO

    OPEN_PAREN      shift and go to state 21
    ID              shift and go to state 35
    NUMERO          shift and go to state 26

    arithmetic_expr                shift and go to state 34
    term                           shift and go to state 22

state 22

    (16) arithmetic_expr -> term .

    PLUS            reduce using rule 16 (arithmetic_expr -> term .)
    MULT            reduce using rule 16 (arithmetic_expr -> term .)
    ENQUANTO        reduce using rule 16 (arithmetic_expr -> term .)
    ID              reduce using rule 16 (arithmetic_expr -> term .)
    OPEN_PAREN      reduce using rule 16 (arithmetic_expr -> term .)
    IF              reduce using rule 16 (arithmetic_expr -> term .)
    ZERO            reduce using rule 16 (arithmetic_expr -> term .)
    EVAL            reduce using rule 16 (arithmetic_expr -> term .)
    NUMERO          reduce using rule 16 (arithmetic_expr -> term .)
    TERMINO         reduce using rule 16 (arithmetic_expr -> term .)
    VEZES           reduce using rule 16 (arithmetic_expr -> term .)
    FIM             reduce using rule 16 (arithmetic_expr -> term .)
    END_IF          reduce using rule 16 (arithmetic_expr -> term .)
    ELSE            reduce using rule 16 (arithmetic_expr -> term .)
    CLOSE_PAREN     reduce using rule 16 (arithmetic_expr -> term .)


state 23

    (17) conditional -> IF . condicao THEN cmds END_IF
    (18) conditional -> IF . condicao THEN cmds ELSE cmds END_IF
    (24) condicao -> . ID COMPARE ID
    (25) condicao -> . ID GREATER ID
    (26) condicao -> . ID LESSER ID
    (27) condicao -> . ID COMPARE NUMERO
    (28) condicao -> . ID GREATER NUMERO
    (29) condicao -> . ID LESSER NUMERO

    ID              shift and go to state 32

    condicao                       shift and go to state 36

state 24

    (20) zero_statement -> ZERO . OPEN_PAREN ID CLOSE_PAREN

    OPEN_PAREN      shift and go to state 37


state 25

    (21) eval_statement -> EVAL . cmds VEZES arithmetic_expr FIM
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (19) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (17) conditional -> . IF condicao THEN cmds END_IF
    (18) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (20) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (21) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (10) term -> . ID
    (11) term -> . NUMERO

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25
    NUMERO          shift and go to state 26

    cmds                           shift and go to state 38
    arithmetic_expr                shift and go to state 15
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18
    term                           shift and go to state 22

state 26

    (11) term -> NUMERO .

    PLUS            reduce using rule 11 (term -> NUMERO .)
    MULT            reduce using rule 11 (term -> NUMERO .)
    ENQUANTO        reduce using rule 11 (term -> NUMERO .)
    ID              reduce using rule 11 (term -> NUMERO .)
    OPEN_PAREN      reduce using rule 11 (term -> NUMERO .)
    IF              reduce using rule 11 (term -> NUMERO .)
    ZERO            reduce using rule 11 (term -> NUMERO .)
    EVAL            reduce using rule 11 (term -> NUMERO .)
    NUMERO          reduce using rule 11 (term -> NUMERO .)
    TERMINO         reduce using rule 11 (term -> NUMERO .)
    VEZES           reduce using rule 11 (term -> NUMERO .)
    FIM             reduce using rule 11 (term -> NUMERO .)
    END_IF          reduce using rule 11 (term -> NUMERO .)
    ELSE            reduce using rule 11 (term -> NUMERO .)
    CLOSE_PAREN     reduce using rule 11 (term -> NUMERO .)


state 27

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO .

    $end            reduce using rule 1 (programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO .)


state 28

    (2) cmds -> cmd cmds .

    TERMINO         reduce using rule 2 (cmds -> cmd cmds .)
    VEZES           reduce using rule 2 (cmds -> cmd cmds .)
    FIM             reduce using rule 2 (cmds -> cmd cmds .)
    END_IF          reduce using rule 2 (cmds -> cmd cmds .)
    ELSE            reduce using rule 2 (cmds -> cmd cmds .)


state 29

    (13) arithmetic_expr -> arithmetic_expr PLUS . arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (10) term -> . ID
    (11) term -> . NUMERO

    OPEN_PAREN      shift and go to state 21
    ID              shift and go to state 35
    NUMERO          shift and go to state 26

    arithmetic_expr                shift and go to state 39
    term                           shift and go to state 22

state 30

    (14) arithmetic_expr -> arithmetic_expr MULT . arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (10) term -> . ID
    (11) term -> . NUMERO

    OPEN_PAREN      shift and go to state 21
    ID              shift and go to state 35
    NUMERO          shift and go to state 26

    arithmetic_expr                shift and go to state 40
    term                           shift and go to state 22

state 31

    (19) while_statement -> ENQUANTO condicao . FACA cmds FIM

    FACA            shift and go to state 41


state 32

    (24) condicao -> ID . COMPARE ID
    (25) condicao -> ID . GREATER ID
    (26) condicao -> ID . LESSER ID
    (27) condicao -> ID . COMPARE NUMERO
    (28) condicao -> ID . GREATER NUMERO
    (29) condicao -> ID . LESSER NUMERO

    COMPARE         shift and go to state 42
    GREATER         shift and go to state 43
    LESSER          shift and go to state 44


state 33

    (12) assignment -> ID EQUAL . arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (10) term -> . ID
    (11) term -> . NUMERO

    OPEN_PAREN      shift and go to state 21
    ID              shift and go to state 35
    NUMERO          shift and go to state 26

    arithmetic_expr                shift and go to state 45
    term                           shift and go to state 22

state 34

    (15) arithmetic_expr -> OPEN_PAREN arithmetic_expr . CLOSE_PAREN
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    CLOSE_PAREN     shift and go to state 46
    PLUS            shift and go to state 29
    MULT            shift and go to state 30


state 35

    (10) term -> ID .

    CLOSE_PAREN     reduce using rule 10 (term -> ID .)
    PLUS            reduce using rule 10 (term -> ID .)
    MULT            reduce using rule 10 (term -> ID .)
    ENQUANTO        reduce using rule 10 (term -> ID .)
    ID              reduce using rule 10 (term -> ID .)
    OPEN_PAREN      reduce using rule 10 (term -> ID .)
    IF              reduce using rule 10 (term -> ID .)
    ZERO            reduce using rule 10 (term -> ID .)
    EVAL            reduce using rule 10 (term -> ID .)
    NUMERO          reduce using rule 10 (term -> ID .)
    TERMINO         reduce using rule 10 (term -> ID .)
    VEZES           reduce using rule 10 (term -> ID .)
    FIM             reduce using rule 10 (term -> ID .)
    END_IF          reduce using rule 10 (term -> ID .)
    ELSE            reduce using rule 10 (term -> ID .)


state 36

    (17) conditional -> IF condicao . THEN cmds END_IF
    (18) conditional -> IF condicao . THEN cmds ELSE cmds END_IF

    THEN            shift and go to state 47


state 37

    (20) zero_statement -> ZERO OPEN_PAREN . ID CLOSE_PAREN

    ID              shift and go to state 48


state 38

    (21) eval_statement -> EVAL cmds . VEZES arithmetic_expr FIM

    VEZES           shift and go to state 49


state 39

    (13) arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    PLUS            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ENQUANTO        reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ID              reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    OPEN_PAREN      reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    IF              reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ZERO            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    EVAL            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    NUMERO          reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    TERMINO         reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    VEZES           reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    FIM             reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    END_IF          reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ELSE            reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    MULT            shift and go to state 30

  ! MULT            [ reduce using rule 13 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]
  ! PLUS            [ shift and go to state 29 ]


state 40

    (14) arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    PLUS            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    MULT            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ENQUANTO        reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ID              reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    OPEN_PAREN      reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    IF              reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ZERO            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    EVAL            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    NUMERO          reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    TERMINO         reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    VEZES           reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    FIM             reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    END_IF          reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ELSE            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 14 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)

  ! PLUS            [ shift and go to state 29 ]
  ! MULT            [ shift and go to state 30 ]


state 41

    (19) while_statement -> ENQUANTO condicao FACA . cmds FIM
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (19) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (17) conditional -> . IF condicao THEN cmds END_IF
    (18) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (20) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (21) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (10) term -> . ID
    (11) term -> . NUMERO

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25
    NUMERO          shift and go to state 26

    cmds                           shift and go to state 50
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18
    term                           shift and go to state 22

state 42

    (24) condicao -> ID COMPARE . ID
    (27) condicao -> ID COMPARE . NUMERO

    ID              shift and go to state 51
    NUMERO          shift and go to state 52


state 43

    (25) condicao -> ID GREATER . ID
    (28) condicao -> ID GREATER . NUMERO

    ID              shift and go to state 53
    NUMERO          shift and go to state 54


state 44

    (26) condicao -> ID LESSER . ID
    (29) condicao -> ID LESSER . NUMERO

    ID              shift and go to state 55
    NUMERO          shift and go to state 56


state 45

    (12) assignment -> ID EQUAL arithmetic_expr .
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    ENQUANTO        reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    ID              reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    OPEN_PAREN      reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    IF              reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    ZERO            reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    EVAL            reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    NUMERO          reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    TERMINO         reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    VEZES           reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    FIM             reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    END_IF          reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    ELSE            reduce using rule 12 (assignment -> ID EQUAL arithmetic_expr .)
    PLUS            shift and go to state 29
    MULT            shift and go to state 30


state 46

    (15) arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .

    PLUS            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    MULT            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ENQUANTO        reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ID              reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    IF              reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ZERO            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    EVAL            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    NUMERO          reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    TERMINO         reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    VEZES           reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    FIM             reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    END_IF          reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ELSE            reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 15 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)


state 47

    (17) conditional -> IF condicao THEN . cmds END_IF
    (18) conditional -> IF condicao THEN . cmds ELSE cmds END_IF
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (19) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (17) conditional -> . IF condicao THEN cmds END_IF
    (18) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (20) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (21) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (10) term -> . ID
    (11) term -> . NUMERO

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25
    NUMERO          shift and go to state 26

    cmds                           shift and go to state 57
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18
    term                           shift and go to state 22

state 48

    (20) zero_statement -> ZERO OPEN_PAREN ID . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 58


state 49

    (21) eval_statement -> EVAL cmds VEZES . arithmetic_expr FIM
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (10) term -> . ID
    (11) term -> . NUMERO

    OPEN_PAREN      shift and go to state 21
    ID              shift and go to state 35
    NUMERO          shift and go to state 26

    arithmetic_expr                shift and go to state 59
    term                           shift and go to state 22

state 50

    (19) while_statement -> ENQUANTO condicao FACA cmds . FIM

    FIM             shift and go to state 60


state 51

    (24) condicao -> ID COMPARE ID .

    FACA            reduce using rule 24 (condicao -> ID COMPARE ID .)
    THEN            reduce using rule 24 (condicao -> ID COMPARE ID .)


state 52

    (27) condicao -> ID COMPARE NUMERO .

    FACA            reduce using rule 27 (condicao -> ID COMPARE NUMERO .)
    THEN            reduce using rule 27 (condicao -> ID COMPARE NUMERO .)


state 53

    (25) condicao -> ID GREATER ID .

    FACA            reduce using rule 25 (condicao -> ID GREATER ID .)
    THEN            reduce using rule 25 (condicao -> ID GREATER ID .)


state 54

    (28) condicao -> ID GREATER NUMERO .

    FACA            reduce using rule 28 (condicao -> ID GREATER NUMERO .)
    THEN            reduce using rule 28 (condicao -> ID GREATER NUMERO .)


state 55

    (26) condicao -> ID LESSER ID .

    FACA            reduce using rule 26 (condicao -> ID LESSER ID .)
    THEN            reduce using rule 26 (condicao -> ID LESSER ID .)


state 56

    (29) condicao -> ID LESSER NUMERO .

    FACA            reduce using rule 29 (condicao -> ID LESSER NUMERO .)
    THEN            reduce using rule 29 (condicao -> ID LESSER NUMERO .)


state 57

    (17) conditional -> IF condicao THEN cmds . END_IF
    (18) conditional -> IF condicao THEN cmds . ELSE cmds END_IF

    END_IF          shift and go to state 61
    ELSE            shift and go to state 62


state 58

    (20) zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .

    ENQUANTO        reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    ID              reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    IF              reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    ZERO            reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    EVAL            reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    NUMERO          reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    TERMINO         reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    VEZES           reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    FIM             reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    END_IF          reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    ELSE            reduce using rule 20 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)


state 59

    (21) eval_statement -> EVAL cmds VEZES arithmetic_expr . FIM
    (13) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr

    FIM             shift and go to state 63
    PLUS            shift and go to state 29
    MULT            shift and go to state 30


state 60

    (19) while_statement -> ENQUANTO condicao FACA cmds FIM .

    ENQUANTO        reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ID              reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    OPEN_PAREN      reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    IF              reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ZERO            reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    EVAL            reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    NUMERO          reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    TERMINO         reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    VEZES           reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    FIM             reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    END_IF          reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ELSE            reduce using rule 19 (while_statement -> ENQUANTO condicao FACA cmds FIM .)


state 61

    (17) conditional -> IF condicao THEN cmds END_IF .

    ENQUANTO        reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    ID              reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    OPEN_PAREN      reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    IF              reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    ZERO            reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    EVAL            reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    NUMERO          reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    TERMINO         reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    VEZES           reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    FIM             reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    END_IF          reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)
    ELSE            reduce using rule 17 (conditional -> IF condicao THEN cmds END_IF .)


state 62

    (18) conditional -> IF condicao THEN cmds ELSE . cmds END_IF
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . arithmetic_expr
    (7) cmd -> . conditional
    (8) cmd -> . zero_statement
    (9) cmd -> . eval_statement
    (19) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (12) assignment -> . ID EQUAL arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (15) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (16) arithmetic_expr -> . term
    (17) conditional -> . IF condicao THEN cmds END_IF
    (18) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (20) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (21) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM
    (10) term -> . ID
    (11) term -> . NUMERO

    ENQUANTO        shift and go to state 19
    ID              shift and go to state 20
    OPEN_PAREN      shift and go to state 21
    IF              shift and go to state 23
    ZERO            shift and go to state 24
    EVAL            shift and go to state 25
    NUMERO          shift and go to state 26

    cmds                           shift and go to state 64
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    arithmetic_expr                shift and go to state 15
    conditional                    shift and go to state 16
    zero_statement                 shift and go to state 17
    eval_statement                 shift and go to state 18
    term                           shift and go to state 22

state 63

    (21) eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .

    ENQUANTO        reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ID              reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    OPEN_PAREN      reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    IF              reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ZERO            reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    EVAL            reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    NUMERO          reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    TERMINO         reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    VEZES           reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    FIM             reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    END_IF          reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ELSE            reduce using rule 21 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)


state 64

    (18) conditional -> IF condicao THEN cmds ELSE cmds . END_IF

    END_IF          shift and go to state 65


state 65

    (18) conditional -> IF condicao THEN cmds ELSE cmds END_IF .

    ENQUANTO        reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ID              reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    OPEN_PAREN      reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    IF              reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ZERO            reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    EVAL            reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    NUMERO          reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    TERMINO         reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    VEZES           reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    FIM             reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    END_IF          reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ELSE            reduce using rule 18 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)

