Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO
Rule 2     cmds -> cmd cmds
Rule 3     cmds -> cmd
Rule 4     cmd -> while_statement
Rule 5     cmd -> assignment
Rule 6     cmd -> conditional
Rule 7     cmd -> zero_statement
Rule 8     cmd -> eval_statement
Rule 9     term -> ID
Rule 10    term -> NUMERO
Rule 11    assignment -> ID EQUAL arithmetic_expr
Rule 12    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 13    arithmetic_expr -> arithmetic_expr MULT arithmetic_expr
Rule 14    arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr
Rule 15    arithmetic_expr -> arithmetic_expr DIV arithmetic_expr
Rule 16    arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN
Rule 17    arithmetic_expr -> term
Rule 18    conditional -> IF condicao THEN cmds END_IF
Rule 19    conditional -> IF condicao THEN cmds ELSE cmds END_IF
Rule 20    while_statement -> ENQUANTO condicao FACA cmds FIM
Rule 21    zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN
Rule 22    eval_statement -> EVAL cmds VEZES arithmetic_expr FIM
Rule 23    varlist -> ID varlist
Rule 24    varlist -> ID
Rule 25    condicao -> arithmetic_expr COMPARE arithmetic_expr
Rule 26    condicao -> arithmetic_expr GREATER arithmetic_expr
Rule 27    condicao -> arithmetic_expr LESSER arithmetic_expr
Rule 28    condicao -> ID
Rule 29    idlist -> ID idlist
Rule 30    idlist -> ID

Terminals, with rules where they appear

CLOSE_PAREN          : 16 21
COMPARE              : 25
DIV                  : 15
ELSE                 : 19
END_IF               : 18 19
ENQUANTO             : 20
EQUAL                : 11
EVAL                 : 22
EXECUTE              : 1
FACA                 : 20
FIM                  : 20 22
GREATER              : 26
ID                   : 9 11 21 23 24 28 29 30
IF                   : 18 19
INICIO               : 1
LESSER               : 27
MINUS                : 14
MONITOR              : 1
MULT                 : 13
NUMERO               : 10
OPEN_PAREN           : 16 21
PLUS                 : 12
TERMINO              : 1
THEN                 : 18 19
VEZES                : 22
ZERO                 : 21
error                : 

Nonterminals, with rules where they appear

arithmetic_expr      : 11 12 12 13 13 14 14 15 15 16 22 25 25 26 26 27 27
assignment           : 5
cmd                  : 2 3
cmds                 : 1 2 18 19 19 20 22
condicao             : 18 19 20
conditional          : 6
eval_statement       : 8
idlist               : 1 29
programa             : 0
term                 : 17
varlist              : 1 23
while_statement      : 4
zero_statement       : 7

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO varlist MONITOR idlist EXECUTE cmds TERMINO

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . varlist MONITOR idlist EXECUTE cmds TERMINO
    (23) varlist -> . ID varlist
    (24) varlist -> . ID

    ID              shift and go to state 4

    varlist                        shift and go to state 3

state 3

    (1) programa -> INICIO varlist . MONITOR idlist EXECUTE cmds TERMINO

    MONITOR         shift and go to state 5


state 4

    (23) varlist -> ID . varlist
    (24) varlist -> ID .
    (23) varlist -> . ID varlist
    (24) varlist -> . ID

    MONITOR         reduce using rule 24 (varlist -> ID .)
    ID              shift and go to state 4

    varlist                        shift and go to state 6

state 5

    (1) programa -> INICIO varlist MONITOR . idlist EXECUTE cmds TERMINO
    (29) idlist -> . ID idlist
    (30) idlist -> . ID

    ID              shift and go to state 8

    idlist                         shift and go to state 7

state 6

    (23) varlist -> ID varlist .

    MONITOR         reduce using rule 23 (varlist -> ID varlist .)


state 7

    (1) programa -> INICIO varlist MONITOR idlist . EXECUTE cmds TERMINO

    EXECUTE         shift and go to state 9


state 8

    (29) idlist -> ID . idlist
    (30) idlist -> ID .
    (29) idlist -> . ID idlist
    (30) idlist -> . ID

    EXECUTE         reduce using rule 30 (idlist -> ID .)
    ID              shift and go to state 8

    idlist                         shift and go to state 10

state 9

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE . cmds TERMINO
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . conditional
    (7) cmd -> . zero_statement
    (8) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (11) assignment -> . ID EQUAL arithmetic_expr
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM

    ENQUANTO        shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    ZERO            shift and go to state 21
    EVAL            shift and go to state 22

    cmds                           shift and go to state 11
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    zero_statement                 shift and go to state 16
    eval_statement                 shift and go to state 17

state 10

    (29) idlist -> ID idlist .

    EXECUTE         reduce using rule 29 (idlist -> ID idlist .)


state 11

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE cmds . TERMINO

    TERMINO         shift and go to state 23


state 12

    (2) cmds -> cmd . cmds
    (3) cmds -> cmd .
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . conditional
    (7) cmd -> . zero_statement
    (8) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (11) assignment -> . ID EQUAL arithmetic_expr
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM

    TERMINO         reduce using rule 3 (cmds -> cmd .)
    VEZES           reduce using rule 3 (cmds -> cmd .)
    FIM             reduce using rule 3 (cmds -> cmd .)
    END_IF          reduce using rule 3 (cmds -> cmd .)
    ELSE            reduce using rule 3 (cmds -> cmd .)
    ENQUANTO        shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    ZERO            shift and go to state 21
    EVAL            shift and go to state 22

    cmd                            shift and go to state 12
    cmds                           shift and go to state 24
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    zero_statement                 shift and go to state 16
    eval_statement                 shift and go to state 17

state 13

    (4) cmd -> while_statement .

    ENQUANTO        reduce using rule 4 (cmd -> while_statement .)
    ID              reduce using rule 4 (cmd -> while_statement .)
    IF              reduce using rule 4 (cmd -> while_statement .)
    ZERO            reduce using rule 4 (cmd -> while_statement .)
    EVAL            reduce using rule 4 (cmd -> while_statement .)
    TERMINO         reduce using rule 4 (cmd -> while_statement .)
    VEZES           reduce using rule 4 (cmd -> while_statement .)
    FIM             reduce using rule 4 (cmd -> while_statement .)
    END_IF          reduce using rule 4 (cmd -> while_statement .)
    ELSE            reduce using rule 4 (cmd -> while_statement .)


state 14

    (5) cmd -> assignment .

    ENQUANTO        reduce using rule 5 (cmd -> assignment .)
    ID              reduce using rule 5 (cmd -> assignment .)
    IF              reduce using rule 5 (cmd -> assignment .)
    ZERO            reduce using rule 5 (cmd -> assignment .)
    EVAL            reduce using rule 5 (cmd -> assignment .)
    TERMINO         reduce using rule 5 (cmd -> assignment .)
    VEZES           reduce using rule 5 (cmd -> assignment .)
    FIM             reduce using rule 5 (cmd -> assignment .)
    END_IF          reduce using rule 5 (cmd -> assignment .)
    ELSE            reduce using rule 5 (cmd -> assignment .)


state 15

    (6) cmd -> conditional .

    ENQUANTO        reduce using rule 6 (cmd -> conditional .)
    ID              reduce using rule 6 (cmd -> conditional .)
    IF              reduce using rule 6 (cmd -> conditional .)
    ZERO            reduce using rule 6 (cmd -> conditional .)
    EVAL            reduce using rule 6 (cmd -> conditional .)
    TERMINO         reduce using rule 6 (cmd -> conditional .)
    VEZES           reduce using rule 6 (cmd -> conditional .)
    FIM             reduce using rule 6 (cmd -> conditional .)
    END_IF          reduce using rule 6 (cmd -> conditional .)
    ELSE            reduce using rule 6 (cmd -> conditional .)


state 16

    (7) cmd -> zero_statement .

    ENQUANTO        reduce using rule 7 (cmd -> zero_statement .)
    ID              reduce using rule 7 (cmd -> zero_statement .)
    IF              reduce using rule 7 (cmd -> zero_statement .)
    ZERO            reduce using rule 7 (cmd -> zero_statement .)
    EVAL            reduce using rule 7 (cmd -> zero_statement .)
    TERMINO         reduce using rule 7 (cmd -> zero_statement .)
    VEZES           reduce using rule 7 (cmd -> zero_statement .)
    FIM             reduce using rule 7 (cmd -> zero_statement .)
    END_IF          reduce using rule 7 (cmd -> zero_statement .)
    ELSE            reduce using rule 7 (cmd -> zero_statement .)


state 17

    (8) cmd -> eval_statement .

    ENQUANTO        reduce using rule 8 (cmd -> eval_statement .)
    ID              reduce using rule 8 (cmd -> eval_statement .)
    IF              reduce using rule 8 (cmd -> eval_statement .)
    ZERO            reduce using rule 8 (cmd -> eval_statement .)
    EVAL            reduce using rule 8 (cmd -> eval_statement .)
    TERMINO         reduce using rule 8 (cmd -> eval_statement .)
    VEZES           reduce using rule 8 (cmd -> eval_statement .)
    FIM             reduce using rule 8 (cmd -> eval_statement .)
    END_IF          reduce using rule 8 (cmd -> eval_statement .)
    ELSE            reduce using rule 8 (cmd -> eval_statement .)


state 18

    (20) while_statement -> ENQUANTO . condicao FACA cmds FIM
    (25) condicao -> . arithmetic_expr COMPARE arithmetic_expr
    (26) condicao -> . arithmetic_expr GREATER arithmetic_expr
    (27) condicao -> . arithmetic_expr LESSER arithmetic_expr
    (28) condicao -> . ID
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    ID              shift and go to state 27
    OPEN_PAREN      shift and go to state 28
    NUMERO          shift and go to state 30

    condicao                       shift and go to state 25
    arithmetic_expr                shift and go to state 26
    term                           shift and go to state 29

state 19

    (11) assignment -> ID . EQUAL arithmetic_expr

    EQUAL           shift and go to state 31


state 20

    (18) conditional -> IF . condicao THEN cmds END_IF
    (19) conditional -> IF . condicao THEN cmds ELSE cmds END_IF
    (25) condicao -> . arithmetic_expr COMPARE arithmetic_expr
    (26) condicao -> . arithmetic_expr GREATER arithmetic_expr
    (27) condicao -> . arithmetic_expr LESSER arithmetic_expr
    (28) condicao -> . ID
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    ID              shift and go to state 27
    OPEN_PAREN      shift and go to state 28
    NUMERO          shift and go to state 30

    condicao                       shift and go to state 32
    arithmetic_expr                shift and go to state 26
    term                           shift and go to state 29

state 21

    (21) zero_statement -> ZERO . OPEN_PAREN ID CLOSE_PAREN

    OPEN_PAREN      shift and go to state 33


state 22

    (22) eval_statement -> EVAL . cmds VEZES arithmetic_expr FIM
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . conditional
    (7) cmd -> . zero_statement
    (8) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (11) assignment -> . ID EQUAL arithmetic_expr
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM

    ENQUANTO        shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    ZERO            shift and go to state 21
    EVAL            shift and go to state 22

    cmds                           shift and go to state 34
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    zero_statement                 shift and go to state 16
    eval_statement                 shift and go to state 17

state 23

    (1) programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO .

    $end            reduce using rule 1 (programa -> INICIO varlist MONITOR idlist EXECUTE cmds TERMINO .)


state 24

    (2) cmds -> cmd cmds .

    TERMINO         reduce using rule 2 (cmds -> cmd cmds .)
    VEZES           reduce using rule 2 (cmds -> cmd cmds .)
    FIM             reduce using rule 2 (cmds -> cmd cmds .)
    END_IF          reduce using rule 2 (cmds -> cmd cmds .)
    ELSE            reduce using rule 2 (cmds -> cmd cmds .)


state 25

    (20) while_statement -> ENQUANTO condicao . FACA cmds FIM

    FACA            shift and go to state 35


state 26

    (25) condicao -> arithmetic_expr . COMPARE arithmetic_expr
    (26) condicao -> arithmetic_expr . GREATER arithmetic_expr
    (27) condicao -> arithmetic_expr . LESSER arithmetic_expr
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    COMPARE         shift and go to state 36
    GREATER         shift and go to state 37
    LESSER          shift and go to state 38
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 27

    (28) condicao -> ID .
    (9) term -> ID .

    FACA            reduce using rule 28 (condicao -> ID .)
    THEN            reduce using rule 28 (condicao -> ID .)
    COMPARE         reduce using rule 9 (term -> ID .)
    GREATER         reduce using rule 9 (term -> ID .)
    LESSER          reduce using rule 9 (term -> ID .)
    PLUS            reduce using rule 9 (term -> ID .)
    MULT            reduce using rule 9 (term -> ID .)
    MINUS           reduce using rule 9 (term -> ID .)
    DIV             reduce using rule 9 (term -> ID .)


state 28

    (16) arithmetic_expr -> OPEN_PAREN . arithmetic_expr CLOSE_PAREN
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 43
    term                           shift and go to state 29

state 29

    (17) arithmetic_expr -> term .

    COMPARE         reduce using rule 17 (arithmetic_expr -> term .)
    GREATER         reduce using rule 17 (arithmetic_expr -> term .)
    LESSER          reduce using rule 17 (arithmetic_expr -> term .)
    PLUS            reduce using rule 17 (arithmetic_expr -> term .)
    MULT            reduce using rule 17 (arithmetic_expr -> term .)
    MINUS           reduce using rule 17 (arithmetic_expr -> term .)
    DIV             reduce using rule 17 (arithmetic_expr -> term .)
    CLOSE_PAREN     reduce using rule 17 (arithmetic_expr -> term .)
    ENQUANTO        reduce using rule 17 (arithmetic_expr -> term .)
    ID              reduce using rule 17 (arithmetic_expr -> term .)
    IF              reduce using rule 17 (arithmetic_expr -> term .)
    ZERO            reduce using rule 17 (arithmetic_expr -> term .)
    EVAL            reduce using rule 17 (arithmetic_expr -> term .)
    TERMINO         reduce using rule 17 (arithmetic_expr -> term .)
    VEZES           reduce using rule 17 (arithmetic_expr -> term .)
    FIM             reduce using rule 17 (arithmetic_expr -> term .)
    END_IF          reduce using rule 17 (arithmetic_expr -> term .)
    ELSE            reduce using rule 17 (arithmetic_expr -> term .)
    FACA            reduce using rule 17 (arithmetic_expr -> term .)
    THEN            reduce using rule 17 (arithmetic_expr -> term .)


state 30

    (10) term -> NUMERO .

    COMPARE         reduce using rule 10 (term -> NUMERO .)
    GREATER         reduce using rule 10 (term -> NUMERO .)
    LESSER          reduce using rule 10 (term -> NUMERO .)
    PLUS            reduce using rule 10 (term -> NUMERO .)
    MULT            reduce using rule 10 (term -> NUMERO .)
    MINUS           reduce using rule 10 (term -> NUMERO .)
    DIV             reduce using rule 10 (term -> NUMERO .)
    CLOSE_PAREN     reduce using rule 10 (term -> NUMERO .)
    ENQUANTO        reduce using rule 10 (term -> NUMERO .)
    ID              reduce using rule 10 (term -> NUMERO .)
    IF              reduce using rule 10 (term -> NUMERO .)
    ZERO            reduce using rule 10 (term -> NUMERO .)
    EVAL            reduce using rule 10 (term -> NUMERO .)
    TERMINO         reduce using rule 10 (term -> NUMERO .)
    VEZES           reduce using rule 10 (term -> NUMERO .)
    FIM             reduce using rule 10 (term -> NUMERO .)
    END_IF          reduce using rule 10 (term -> NUMERO .)
    ELSE            reduce using rule 10 (term -> NUMERO .)
    FACA            reduce using rule 10 (term -> NUMERO .)
    THEN            reduce using rule 10 (term -> NUMERO .)


state 31

    (11) assignment -> ID EQUAL . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 45
    term                           shift and go to state 29

state 32

    (18) conditional -> IF condicao . THEN cmds END_IF
    (19) conditional -> IF condicao . THEN cmds ELSE cmds END_IF

    THEN            shift and go to state 46


state 33

    (21) zero_statement -> ZERO OPEN_PAREN . ID CLOSE_PAREN

    ID              shift and go to state 47


state 34

    (22) eval_statement -> EVAL cmds . VEZES arithmetic_expr FIM

    VEZES           shift and go to state 48


state 35

    (20) while_statement -> ENQUANTO condicao FACA . cmds FIM
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . conditional
    (7) cmd -> . zero_statement
    (8) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (11) assignment -> . ID EQUAL arithmetic_expr
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM

    ENQUANTO        shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    ZERO            shift and go to state 21
    EVAL            shift and go to state 22

    cmds                           shift and go to state 49
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    zero_statement                 shift and go to state 16
    eval_statement                 shift and go to state 17

state 36

    (25) condicao -> arithmetic_expr COMPARE . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 50
    term                           shift and go to state 29

state 37

    (26) condicao -> arithmetic_expr GREATER . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 51
    term                           shift and go to state 29

state 38

    (27) condicao -> arithmetic_expr LESSER . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 52
    term                           shift and go to state 29

state 39

    (12) arithmetic_expr -> arithmetic_expr PLUS . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 53
    term                           shift and go to state 29

state 40

    (13) arithmetic_expr -> arithmetic_expr MULT . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 54
    term                           shift and go to state 29

state 41

    (14) arithmetic_expr -> arithmetic_expr MINUS . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 55
    term                           shift and go to state 29

state 42

    (15) arithmetic_expr -> arithmetic_expr DIV . arithmetic_expr
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 56
    term                           shift and go to state 29

state 43

    (16) arithmetic_expr -> OPEN_PAREN arithmetic_expr . CLOSE_PAREN
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    CLOSE_PAREN     shift and go to state 57
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 44

    (9) term -> ID .

    CLOSE_PAREN     reduce using rule 9 (term -> ID .)
    PLUS            reduce using rule 9 (term -> ID .)
    MULT            reduce using rule 9 (term -> ID .)
    MINUS           reduce using rule 9 (term -> ID .)
    DIV             reduce using rule 9 (term -> ID .)
    ENQUANTO        reduce using rule 9 (term -> ID .)
    ID              reduce using rule 9 (term -> ID .)
    IF              reduce using rule 9 (term -> ID .)
    ZERO            reduce using rule 9 (term -> ID .)
    EVAL            reduce using rule 9 (term -> ID .)
    TERMINO         reduce using rule 9 (term -> ID .)
    VEZES           reduce using rule 9 (term -> ID .)
    FIM             reduce using rule 9 (term -> ID .)
    END_IF          reduce using rule 9 (term -> ID .)
    ELSE            reduce using rule 9 (term -> ID .)
    FACA            reduce using rule 9 (term -> ID .)
    THEN            reduce using rule 9 (term -> ID .)
    COMPARE         reduce using rule 9 (term -> ID .)
    GREATER         reduce using rule 9 (term -> ID .)
    LESSER          reduce using rule 9 (term -> ID .)


state 45

    (11) assignment -> ID EQUAL arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    ENQUANTO        reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    ID              reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    IF              reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    ZERO            reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    EVAL            reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    TERMINO         reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    VEZES           reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    FIM             reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    END_IF          reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    ELSE            reduce using rule 11 (assignment -> ID EQUAL arithmetic_expr .)
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 46

    (18) conditional -> IF condicao THEN . cmds END_IF
    (19) conditional -> IF condicao THEN . cmds ELSE cmds END_IF
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . conditional
    (7) cmd -> . zero_statement
    (8) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (11) assignment -> . ID EQUAL arithmetic_expr
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM

    ENQUANTO        shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    ZERO            shift and go to state 21
    EVAL            shift and go to state 22

    cmds                           shift and go to state 58
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    zero_statement                 shift and go to state 16
    eval_statement                 shift and go to state 17

state 47

    (21) zero_statement -> ZERO OPEN_PAREN ID . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 59


state 48

    (22) eval_statement -> EVAL cmds VEZES . arithmetic_expr FIM
    (12) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (13) arithmetic_expr -> . arithmetic_expr MULT arithmetic_expr
    (14) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (15) arithmetic_expr -> . arithmetic_expr DIV arithmetic_expr
    (16) arithmetic_expr -> . OPEN_PAREN arithmetic_expr CLOSE_PAREN
    (17) arithmetic_expr -> . term
    (9) term -> . ID
    (10) term -> . NUMERO

    OPEN_PAREN      shift and go to state 28
    ID              shift and go to state 44
    NUMERO          shift and go to state 30

    arithmetic_expr                shift and go to state 60
    term                           shift and go to state 29

state 49

    (20) while_statement -> ENQUANTO condicao FACA cmds . FIM

    FIM             shift and go to state 61


state 50

    (25) condicao -> arithmetic_expr COMPARE arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    FACA            reduce using rule 25 (condicao -> arithmetic_expr COMPARE arithmetic_expr .)
    THEN            reduce using rule 25 (condicao -> arithmetic_expr COMPARE arithmetic_expr .)
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 51

    (26) condicao -> arithmetic_expr GREATER arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    FACA            reduce using rule 26 (condicao -> arithmetic_expr GREATER arithmetic_expr .)
    THEN            reduce using rule 26 (condicao -> arithmetic_expr GREATER arithmetic_expr .)
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 52

    (27) condicao -> arithmetic_expr LESSER arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    FACA            reduce using rule 27 (condicao -> arithmetic_expr LESSER arithmetic_expr .)
    THEN            reduce using rule 27 (condicao -> arithmetic_expr LESSER arithmetic_expr .)
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 53

    (12) arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    COMPARE         reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    GREATER         reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    LESSER          reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    PLUS            reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    MINUS           reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ENQUANTO        reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ID              reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    IF              reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ZERO            reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    EVAL            reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    TERMINO         reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    VEZES           reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    FIM             reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    END_IF          reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ELSE            reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    FACA            reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    THEN            reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    MULT            shift and go to state 40
    DIV             shift and go to state 42

  ! MULT            [ reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]
  ! DIV             [ reduce using rule 12 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 41 ]


state 54

    (13) arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    COMPARE         reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    GREATER         reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    LESSER          reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    PLUS            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    MULT            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    MINUS           reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    DIV             reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ENQUANTO        reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ID              reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    IF              reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ZERO            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    EVAL            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    TERMINO         reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    VEZES           reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    FIM             reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    END_IF          reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    ELSE            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    FACA            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)
    THEN            reduce using rule 13 (arithmetic_expr -> arithmetic_expr MULT arithmetic_expr .)

  ! PLUS            [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]


state 55

    (14) arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    COMPARE         reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    GREATER         reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    LESSER          reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    PLUS            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    MINUS           reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    ENQUANTO        reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    ID              reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    IF              reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    ZERO            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    EVAL            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    TERMINO         reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    VEZES           reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    FIM             reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    END_IF          reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    ELSE            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    FACA            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    THEN            reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    MULT            shift and go to state 40
    DIV             shift and go to state 42

  ! MULT            [ reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .) ]
  ! DIV             [ reduce using rule 14 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 41 ]


state 56

    (15) arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    COMPARE         reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    GREATER         reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    LESSER          reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    PLUS            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    MULT            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    MINUS           reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    DIV             reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    CLOSE_PAREN     reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    ENQUANTO        reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    ID              reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    IF              reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    ZERO            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    EVAL            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    TERMINO         reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    VEZES           reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    FIM             reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    END_IF          reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    ELSE            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    FACA            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)
    THEN            reduce using rule 15 (arithmetic_expr -> arithmetic_expr DIV arithmetic_expr .)

  ! PLUS            [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! DIV             [ shift and go to state 42 ]


state 57

    (16) arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .

    COMPARE         reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    GREATER         reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    LESSER          reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    PLUS            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    MULT            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    MINUS           reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    DIV             reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ENQUANTO        reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ID              reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    IF              reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ZERO            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    EVAL            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    TERMINO         reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    VEZES           reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    FIM             reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    END_IF          reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    ELSE            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    FACA            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)
    THEN            reduce using rule 16 (arithmetic_expr -> OPEN_PAREN arithmetic_expr CLOSE_PAREN .)


state 58

    (18) conditional -> IF condicao THEN cmds . END_IF
    (19) conditional -> IF condicao THEN cmds . ELSE cmds END_IF

    END_IF          shift and go to state 62
    ELSE            shift and go to state 63


state 59

    (21) zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .

    ENQUANTO        reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    ID              reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    IF              reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    ZERO            reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    EVAL            reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    TERMINO         reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    VEZES           reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    FIM             reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    END_IF          reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)
    ELSE            reduce using rule 21 (zero_statement -> ZERO OPEN_PAREN ID CLOSE_PAREN .)


state 60

    (22) eval_statement -> EVAL cmds VEZES arithmetic_expr . FIM
    (12) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (13) arithmetic_expr -> arithmetic_expr . MULT arithmetic_expr
    (14) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (15) arithmetic_expr -> arithmetic_expr . DIV arithmetic_expr

    FIM             shift and go to state 64
    PLUS            shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    DIV             shift and go to state 42


state 61

    (20) while_statement -> ENQUANTO condicao FACA cmds FIM .

    ENQUANTO        reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ID              reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    IF              reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ZERO            reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    EVAL            reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    TERMINO         reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    VEZES           reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    FIM             reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    END_IF          reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)
    ELSE            reduce using rule 20 (while_statement -> ENQUANTO condicao FACA cmds FIM .)


state 62

    (18) conditional -> IF condicao THEN cmds END_IF .

    ENQUANTO        reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    ID              reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    IF              reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    ZERO            reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    EVAL            reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    TERMINO         reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    VEZES           reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    FIM             reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    END_IF          reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)
    ELSE            reduce using rule 18 (conditional -> IF condicao THEN cmds END_IF .)


state 63

    (19) conditional -> IF condicao THEN cmds ELSE . cmds END_IF
    (2) cmds -> . cmd cmds
    (3) cmds -> . cmd
    (4) cmd -> . while_statement
    (5) cmd -> . assignment
    (6) cmd -> . conditional
    (7) cmd -> . zero_statement
    (8) cmd -> . eval_statement
    (20) while_statement -> . ENQUANTO condicao FACA cmds FIM
    (11) assignment -> . ID EQUAL arithmetic_expr
    (18) conditional -> . IF condicao THEN cmds END_IF
    (19) conditional -> . IF condicao THEN cmds ELSE cmds END_IF
    (21) zero_statement -> . ZERO OPEN_PAREN ID CLOSE_PAREN
    (22) eval_statement -> . EVAL cmds VEZES arithmetic_expr FIM

    ENQUANTO        shift and go to state 18
    ID              shift and go to state 19
    IF              shift and go to state 20
    ZERO            shift and go to state 21
    EVAL            shift and go to state 22

    cmds                           shift and go to state 65
    cmd                            shift and go to state 12
    while_statement                shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    zero_statement                 shift and go to state 16
    eval_statement                 shift and go to state 17

state 64

    (22) eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .

    ENQUANTO        reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ID              reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    IF              reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ZERO            reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    EVAL            reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    TERMINO         reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    VEZES           reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    FIM             reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    END_IF          reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)
    ELSE            reduce using rule 22 (eval_statement -> EVAL cmds VEZES arithmetic_expr FIM .)


state 65

    (19) conditional -> IF condicao THEN cmds ELSE cmds . END_IF

    END_IF          shift and go to state 66


state 66

    (19) conditional -> IF condicao THEN cmds ELSE cmds END_IF .

    ENQUANTO        reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ID              reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    IF              reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ZERO            reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    EVAL            reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    TERMINO         reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    VEZES           reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    FIM             reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    END_IF          reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)
    ELSE            reduce using rule 19 (conditional -> IF condicao THEN cmds ELSE cmds END_IF .)

